###############################################################################################################
## BFISH data processing ####
## initialization of general conditions ##

## This script is for processing BFISH data from years 2020-present
#created by Benjamin L. Richards (benjaminrichards@noaa.gov) 

###############################################################################################################

#install packages
library(ROracle)
library(plyr)
library(reshape2)
library(rgdal)
library(ggplot2)
library(gdata)
library(readxl)

# General Settings --------------------------------------------------------

setwd("~/Bottomfish/Bottomfish Project/BFISH/BFISH Data/Data Analysis/[R]/BFISH 2020-present Data Analysis/WORKING")

dir.create(file.path("inputs"), recursive = TRUE)

#set Deep7 species
d7 <- c("APRU", "ETCA", "ETCO", "HYQU", "PRFI", "PRSI", "PRZO")

#set MOUSS scaler
#m.tot: number of SSU per PSU based on camera radius of 20.2 (n = #PSU, m = #SSU)
#scaler.old <- 194.889
#radius prior to data revisions - 20.2
#radius changed to 18.71548283 or 40.81898499 based on Model 1 and Model 2 Ault/Smith revisions (5/30/18)
#radius changed to 27.6 based on Ault et al. 2018 (8/22/2018)
cam.radius <- 27.60333457
psu.area <- 500 * 500
ssu.area <- pi * (cam.radius^2)
scaler <- psu.area / ssu.area

#set exploited stage specific processing (only fish > 29 cm, length corresponds to 1lb opakapaka)
#lc <- 37.0  (used in Ault et al. 2018)
lc <- 29.0

# Import Data -------------------------------------------------------------

#connect to Oracle database
con <- dbConnect(dbDriver("Oracle"),
                 user = "brichards", #rstudioapi::askForPassword("Database user"),
                 password = "evitable.PILLBOX6wiremen", #rstudioapi::askForPassword("Database password"), #change pw @ https://mid1.pic.gov/dsc_rpts/dsc.dsc_change_pwd
                 dbname = "PIC")
dbListTables(con,schema = "BFISH")


#import data tables and copy to input directory
#Species list 
SPECIES_TABLE <- dbGetQuery(con,"select * from BFISH.SPECIES_LOOKUP")
spp_list.input <- subset(SPECIES_TABLE, select = c(SPECIES_CD, SCIENTIFIC_NAME, COMMON_NAME, SPECIES_TYPE_CD, A, B, GCF))

write.csv(spp_list.input, file = "./inputs/SPECIES_TABLE.csv", row.names = F)

#Research Fishing
CRF_SAMPLE <- dbGetQuery(con,"select * from BFISH.CRF_SAMPLE")
CRF_DRIFT <- dbGetQuery(con,"select * from BFISH.CRF_DRIFT")
CRF_CATCH <- dbGetQuery(con,"select * from BFISH.CRF_CATCH")

write.csv(CRF_SAMPLE, file = "./inputs/CRF_SAMPLE.csv", row.names = F)
write.csv(CRF_DRIFT, file = "./inputs/CRF_DRIFT.csv", row.names = F)
write.csv(CRF_CATCH, file = "./inputs/CRF_CATCH.csv", row.names = F)

#MOUSS
CAM_SAMPLE <- dbGetQuery(con,"select * from BFISH.CAM_SAMPLE")
CAM_MAXN <- dbGetQuery(con,"select * from BFISH.CAM_MAXN")
CAM_LENGTHS <- dbGetQuery(con,"select * from BFISH.CAM_LENGTHS")

write.csv(CAM_SAMPLE, file = "./inputs/CAM_SAMPLE.csv", row.names = F)
write.csv(CAM_MAXN, file = "./inputs/CAM_MAXN.csv", row.names = F)
write.csv(CAM_LENGTHS, file = "./inputs/CAM_LENGTHS.csv", row.names = F)

#import domain information from Geodatabase
fgdb <- "G:/Documents/Bottomfish/Bottomfish project/BFISH/GIS/BFISH.gdb"
subset(ogrDrivers(), grepl("GDB", name))
fc_list <- ogrListLayers(fgdb)

domain.init <- as.data.frame(readOGR(dsn = fgdb,layer = "BFISH_PSU"))
domain.input <- subset(domain.init, inDomain == "Y", select = c("inDomain","Allocation","Island","PSU","lat_deg","lon_deg","Depth_MEDIAN_m","pctHB", "pctHS","acrstrat","hbstrat","STRATA","STRATA_2020"))

write.csv(domain.init, file = "./inputs/domain_init.csv", row.names = F)
write.csv(domain.input, file = "./inputs/domain_input.csv", row.names = F)

#create ntot or psu.count file based on STRATA
psu.count <- ddply(domain.input, .(STRATA), summarize, PSU_COUNT = length(PSU))
psu.count$STRATUM_WEIGHT <- psu.count$PSU_COUNT/(sum(psu.count$PSU_COUNT))

write.csv(psu.count, file = "./inputs/psu_count.csv", row.names = F)

#create ntot or psu.count file based on STRATA_2020
psu.count.2020 <- ddply(domain.input, .(STRATA_2020), summarize, PSU_COUNT = length(PSU))
psu.count.2020$STRATUM_WEIGHT <- psu.count.2020$PSU_COUNT/(sum(psu.count.2020$PSU_COUNT))

write.csv(psu.count.2020, file = "./inputs/psu_count_STRATA_2020 .csv", row.names = F)

#create ntot or psu.count files by island
psu.count.STRATA.island <- ddply(domain.input, .(Island, STRATA), summarize, PSU_COUNT = length(PSU))
psu.count.STRATA_2020.island <- ddply(domain.input, .(Island, STRATA_2020), summarize, PSU_COUNT = length(PSU))

write.csv(psu.count.STRATA.island, file = "./inputs/PSU count by STRATA by Island.csv", row.names = F)
write.csv(psu.count.STRATA_2020.island, file = "./inputs/PSU count by STRAT_2020 by Island.csv", row.names = F)